"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Yunseong Hwang

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
"""

import abc
from . import active_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ActiveStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        active_pb2.CreateRequest,
        active_pb2.CreateResponse,
    ]

    Refer: grpc.UnaryUnaryMultiCallable[
        active_pb2.ReferRequest,
        active_pb2.ReferResponse,
    ]

    Release: grpc.UnaryUnaryMultiCallable[
        active_pb2.ReleaseRequest,
        active_pb2.ReleaseResponse,
    ]

    Destroy: grpc.UnaryUnaryMultiCallable[
        active_pb2.DestroyRequest,
        active_pb2.DestroyResponse,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        active_pb2.ListRequest,
        active_pb2.ListResponse,
    ]

    Describe: grpc.UnaryUnaryMultiCallable[
        active_pb2.DescribeRequest,
        active_pb2.DescribeResponse,
    ]

    GetProperty: grpc.UnaryUnaryMultiCallable[
        active_pb2.GetPropertyRequest,
        active_pb2.GetPropertyResponse,
    ]

    SetProperty: grpc.UnaryUnaryMultiCallable[
        active_pb2.SetPropertyRequest,
        active_pb2.SetPropertyResponse,
    ]

    InvokeMethod: grpc.UnaryUnaryMultiCallable[
        active_pb2.InvokeMethodRequest,
        active_pb2.InvokeMethodResponse,
    ]

    ConnectEvent: grpc.UnaryUnaryMultiCallable[
        active_pb2.ConnectEventRequest,
        active_pb2.ConnectEventResponse,
    ]

    DisconnectEvent: grpc.UnaryUnaryMultiCallable[
        active_pb2.DisconnectEventRequest,
        active_pb2.DisconnectEventResponse,
    ]

    HandleEvent: grpc.StreamStreamMultiCallable[
        active_pb2.HandleEventResponse,
        active_pb2.HandleEventRequest,
    ]

class ActiveAsyncStub:
    Create: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.CreateRequest,
        active_pb2.CreateResponse,
    ]

    Refer: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.ReferRequest,
        active_pb2.ReferResponse,
    ]

    Release: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.ReleaseRequest,
        active_pb2.ReleaseResponse,
    ]

    Destroy: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.DestroyRequest,
        active_pb2.DestroyResponse,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.ListRequest,
        active_pb2.ListResponse,
    ]

    Describe: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.DescribeRequest,
        active_pb2.DescribeResponse,
    ]

    GetProperty: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.GetPropertyRequest,
        active_pb2.GetPropertyResponse,
    ]

    SetProperty: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.SetPropertyRequest,
        active_pb2.SetPropertyResponse,
    ]

    InvokeMethod: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.InvokeMethodRequest,
        active_pb2.InvokeMethodResponse,
    ]

    ConnectEvent: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.ConnectEventRequest,
        active_pb2.ConnectEventResponse,
    ]

    DisconnectEvent: grpc.aio.UnaryUnaryMultiCallable[
        active_pb2.DisconnectEventRequest,
        active_pb2.DisconnectEventResponse,
    ]

    HandleEvent: grpc.aio.StreamStreamMultiCallable[
        active_pb2.HandleEventResponse,
        active_pb2.HandleEventRequest,
    ]

class ActiveServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(
        self,
        request: active_pb2.CreateRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.CreateResponse, collections.abc.Awaitable[active_pb2.CreateResponse]]: ...

    @abc.abstractmethod
    def Refer(
        self,
        request: active_pb2.ReferRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.ReferResponse, collections.abc.Awaitable[active_pb2.ReferResponse]]: ...

    @abc.abstractmethod
    def Release(
        self,
        request: active_pb2.ReleaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.ReleaseResponse, collections.abc.Awaitable[active_pb2.ReleaseResponse]]: ...

    @abc.abstractmethod
    def Destroy(
        self,
        request: active_pb2.DestroyRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.DestroyResponse, collections.abc.Awaitable[active_pb2.DestroyResponse]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: active_pb2.ListRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.ListResponse, collections.abc.Awaitable[active_pb2.ListResponse]]: ...

    @abc.abstractmethod
    def Describe(
        self,
        request: active_pb2.DescribeRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.DescribeResponse, collections.abc.Awaitable[active_pb2.DescribeResponse]]: ...

    @abc.abstractmethod
    def GetProperty(
        self,
        request: active_pb2.GetPropertyRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.GetPropertyResponse, collections.abc.Awaitable[active_pb2.GetPropertyResponse]]: ...

    @abc.abstractmethod
    def SetProperty(
        self,
        request: active_pb2.SetPropertyRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.SetPropertyResponse, collections.abc.Awaitable[active_pb2.SetPropertyResponse]]: ...

    @abc.abstractmethod
    def InvokeMethod(
        self,
        request: active_pb2.InvokeMethodRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.InvokeMethodResponse, collections.abc.Awaitable[active_pb2.InvokeMethodResponse]]: ...

    @abc.abstractmethod
    def ConnectEvent(
        self,
        request: active_pb2.ConnectEventRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.ConnectEventResponse, collections.abc.Awaitable[active_pb2.ConnectEventResponse]]: ...

    @abc.abstractmethod
    def DisconnectEvent(
        self,
        request: active_pb2.DisconnectEventRequest,
        context: _ServicerContext,
    ) -> typing.Union[active_pb2.DisconnectEventResponse, collections.abc.Awaitable[active_pb2.DisconnectEventResponse]]: ...

    @abc.abstractmethod
    def HandleEvent(
        self,
        request_iterator: _MaybeAsyncIterator[active_pb2.HandleEventResponse],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[active_pb2.HandleEventRequest], collections.abc.AsyncIterator[active_pb2.HandleEventRequest]]: ...

def add_ActiveServicer_to_server(servicer: ActiveServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
