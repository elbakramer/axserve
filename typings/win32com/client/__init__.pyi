from _typeshed import Incomplete

from . import dynamic as dynamic
from . import gencache as gencache

def GetObject(Pathname=None, Class=None, clsctx=None): ...
def GetActiveObject(Class, clsctx=...): ...
def Moniker(Pathname, clsctx=...): ...
def Dispatch(dispatch, userName=None, resultCLSID=None, typeinfo=None, clsctx=...): ...
def DispatchEx(
    clsid, machine=None, userName=None, resultCLSID=None, typeinfo=None, clsctx=None
): ...

class CDispatch(dynamic.CDispatch):
    def __dir__(self): ...

def CastTo(ob, target, typelib=None): ...

class Constants:
    __dicts__: Incomplete
    def __init__(self) -> None: ...
    def __getattr__(self, a): ...

constants: Incomplete

class EventsProxy:
    def __init__(self, ob) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, val) -> None: ...

def DispatchWithEvents(clsid, user_event_class) -> EventsProxy: ...
def WithEvents(disp, user_event_class): ...
def getevents(clsid): ...
def Record(name, object): ...
def register_record_class(cls) -> None: ...

class DispatchBaseClass:
    def __init__(self, oobj=None) -> None: ...
    def __dir__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value) -> None: ...

class CoClassBaseClass:
    def __init__(self, oobj=None) -> None: ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...

class VARIANT:
    varianttype: Incomplete
    def __init__(self, vt, value) -> None: ...
    value: Incomplete
