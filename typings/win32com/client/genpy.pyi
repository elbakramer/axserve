from _typeshed import Incomplete

from . import build as build
from . import gencache as gencache

makepy_version: str
GEN_FULL: str
GEN_DEMAND_BASE: str
GEN_DEMAND_CHILD: str
mapVTToTypeString: Incomplete

def MakeDefaultArgsForPropertyPut(argsDesc): ...
def MakeMapLineEntry(dispid, wFlags, retType, argTypes, user, resultCLSID): ...
def MakeEventMethodName(eventName): ...
def WriteSinkEventMap(obj, stream) -> None: ...

class WritableItem:
    def __lt__(self, other): ...

class RecordItem(build.OleItem, WritableItem):
    order: int
    typename: str
    clsid: Incomplete
    def __init__(self, typeInfo, typeAttr, doc=None, bForUser: int = 1) -> None: ...
    def WriteClass(self, generator) -> None: ...

def WriteAliasesForItem(item, aliasItems, stream) -> None: ...

class AliasItem(build.OleItem, WritableItem):
    order: int
    typename: str
    attr: Incomplete
    aliasDoc: Incomplete
    aliasAttr: Incomplete
    def __init__(self, typeinfo, attr, doc=None, bForUser: int = 1) -> None: ...
    bWritten: int
    def WriteAliasItem(self, aliasDict, stream) -> None: ...

class EnumerationItem(build.OleItem, WritableItem):
    order: int
    typename: str
    clsid: Incomplete
    mapVars: Incomplete
    hidden: Incomplete
    def __init__(self, typeinfo, attr, doc=None, bForUser: int = 1) -> None: ...
    def WriteEnumerationItems(self, stream): ...

class VTableItem(build.VTableItem, WritableItem):
    order: int
    bWritten: int
    def WriteClass(self, generator) -> None: ...
    def WriteVTableMap(self, generator) -> None: ...

class DispatchItem(build.DispatchItem, WritableItem):
    order: int
    type_attr: Incomplete
    coclass_clsid: Incomplete
    def __init__(self, typeinfo, attr, doc=None) -> None: ...
    bWritten: int
    def WriteClass(self, generator) -> None: ...
    def WriteClassHeader(self, generator) -> None: ...
    def WriteEventSinkClassHeader(self, generator) -> None: ...
    def WriteCallbackClassBody(self, generator) -> None: ...
    def WriteClassBody(self, generator) -> None: ...

class CoClassItem(build.OleItem, WritableItem):
    order: int
    typename: str
    clsid: Incomplete
    sources: Incomplete
    interfaces: Incomplete
    bIsDispatch: int
    def __init__(
        self, typeinfo, attr, doc=None, sources=[], interfaces=[], bForUser: int = 1
    ) -> None: ...
    bWritten: int
    def WriteClass(self, generator) -> None: ...

class GeneratorProgress:
    def __init__(self) -> None: ...
    tlb_desc: Incomplete
    def Starting(self, tlb_desc) -> None: ...
    def Finished(self) -> None: ...
    def SetDescription(self, desc, maxticks=None) -> None: ...
    def Tick(self, desc=None) -> None: ...
    def VerboseProgress(self, desc) -> None: ...
    def LogWarning(self, desc) -> None: ...
    def LogBeginGenerate(self, filename) -> None: ...
    def Close(self) -> None: ...

class Generator:
    bHaveWrittenDispatchBaseClass: int
    bHaveWrittenCoClassBaseClass: int
    bHaveWrittenEventBaseClass: int
    typelib: Incomplete
    sourceFilename: Incomplete
    bBuildHidden: Incomplete
    progress: Incomplete
    file: Incomplete
    def __init__(
        self, typelib, sourceFilename, progressObject, bBuildHidden: int = 1
    ) -> None: ...
    def CollectOleItemInfosFromType(self): ...
    def BuildOleItemsFromType(
        self,
    ) -> tuple[
        dict[str, DispatchItem | CoClassItem],
        dict[str, EnumerationItem],
        dict[str, RecordItem],
        dict[str, VTableItem],
    ]: ...
    def open_writer(self, filename, encoding: str = "utf-8"): ...
    def finish_writer(self, filename, f, worked) -> None: ...
    def get_temp_filename(self, filename): ...
    generate_type: Incomplete
    def generate(self, file, is_for_demand: int = 0) -> None: ...
    def do_gen_file_header(self) -> None: ...
    def do_generate(self) -> None: ...
    base_mod_name: Incomplete
    def generate_child(self, child, dir) -> None: ...
    def do_gen_child_item(self, oleitem) -> None: ...
    def checkWriteDispatchBaseClass(self) -> None: ...
    def checkWriteCoClassBaseClass(self) -> None: ...
    def checkWriteEventBaseClass(self) -> None: ...
